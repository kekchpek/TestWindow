1) Экран выбора пазла
    На этом экране пользователь должен иметь возможность просмотреть пазлы и выбрать тот, который хочет собирать.
    Набор пазлов моежет содержать до 1000 штук. Это слишком много, чтобы показать все разом, так что нужно эффективно загружать и выгружать данные пазлов. Я вижу два пути решения этой задачи:
        - Пагинация: Показывать по 5-10 пазлов на странице. При этом не все пазлы могут влезть в экран, так что нужно добавить скролл по старнице, а так же кнопки перехода на след./пред. страницу, а так же кнопки с вбором индекса страници (+/- 3 страници относительно текущей), а так же кнопки перехода на первую и последнюю страници
        - Ленивый список: Стандартный скролл, элементы которого загружают свои данные при приближении к видимой зоне экрана и выгружают данные при отдолении от нее.
    Так же возможна комбинация этих способов. Это было бы максимально удобно с точки зрения UX, групировать пазлы крупными группами(по ~100 пазлов). Тем не менее в рамках прототипа я бы остановился на варианте с ленивым списком. Изходя из этого поделил бы этот экран на следующие модули, которые надо будет реализовать:
        I. Сам ленивый список (2 чд)
            - Должен отображать только те элементы, которые входят в область экрана плюс 2-3 элемента выше и ниже. Назовем это "активной областью"
            - Как только какой-то элемент вышел из активной области он должен освободить свои ресурсы и отправиться в пулл элементов.
            - Как только мы доскролили до состояния, что в активную область нужно добавить новый элемент, элемент должен взяться из пулла и ему должен передаться минимальный объем данных нужный для того, чтобы загрузить превью пазла(id пазла).
        II. Превью пазла (0.5 чд)
            - Отвечает за отображение данных о пазле. В ТЗ про это ничего, так что пока содержит только превью. В дальнейшем может отображать прогресс по пазлу, награду или другую мета-инфу по пазлу.
            - Содержит методы для загрузки и выгрузки данных о пазле. Сейчас она будет храниться в addressables.
            - Содержит метод для выгрузки данных о пазле (выгружаем addressables ресурс из памяти)
            - Нужно не забыть учесть, что при быстром скроле туда-сюда выгрузка может понадобится до того, как завершилась загрузка и Наоборот
            - Так как картинки могут храниться на сервере, нельзя делать превью кликабельным, пока не загрузится само превью. Это будет означать, что бандл с пазлом загружен.
    Эта часть полностью UI-ная и для нее я бы использовал MVVM или MVP архитектуру.

2) Экран сбора пазла
    Пожалуй самая технически сложная часть игры. Тут удобнее будет активнее использовать компонентный подход для более тщательного отделения различной несвязанной логики. 
    I. Скролбар с кусочками пазла (1.5 чд)
         - При горизонтальном свайпе должнен скролить скоролбар
         - При вертикальном свайпе должен определять какой кусочек вытащить и "вытаскивает" его. При этом кусочек должен продолжить драгаться за пальцем пользователя.
    II. Элемент пазлика(физика) (1.5 чд)
         - Должен поддерживать drag&drop функционал. 
         - Если дропнулся за пределы поля, на котором собираем пазл, то должен перенестись в скроллбар с остальными кусочками.
         - Если дропнулся в скроллбар с кусочками, должен добавляться в этот скроллбар. При этом передавать данные в скроллбар, чтобы тот смог правильно его расположить(предавать свой world position, например)
         - Должен знать о свои X и Y индексы в сетке пазла.
         - Если дропнулся близко к своей позиции в сетке, должен занимать эту позицию и отключать drag&drop
         - В идеале должен так же склеиваться с соседними пазликами при дропе рядом. Но из прототипа я бы эту механику не брал.
    III. Элемент пазлика(графика) (2 чд)
         - Должен использовать картинку пазла, X и Y в сетке, а так же маску кусочка, чтобы корректно отобразить кусочек пазла. Все маски кусочков для конкретной конфигурации пазла можно хранить в отдельном атласе. Информацию о X и Y координатах в сетке, а так же информацию о позиции маски в атласе масок можно сохранить в вершинах динамически сгенерированного меша. То есть для отрисовки всех пазликов нужен будет 1 материал, текстура пазла, текстура содержащая все маски и по 1 мешу на каждый кусочек. 
            *Возможно получится обойтись без обогащеня вершин меша информацией, если использовать спрайты и разбить маску и картинку пазла на спрайты. Но если разные пазлы могут иметь общий конфиг, то тогда удобней будет не использовать спрайты или использовать их только для маски, чтобы не пилить каждый новый пазл на спрайты каждый раз, а использовать заранее заданый конфиг для генерации мешей.
    IV. Разбиение пазла на кусочки. (1.5 чд)
         - При старте пазла надо разбить его на кусочки. Для этого надо взять из конфига пазлов инфу о том, какая именно конфигурация разбиения используется. В конфигурации разбиения должно быть указано:
            * ширина и высота пазлика
            * путь к маске с кусочками
         Этих данных должно хватить, чтобы проинстанцировать все кусочки.
    V. Сохранение и загрузка прогресса. (1.5 чд)
         - Каждые N секунд надо сохранять прогресс игрока. Пока что это будут только позиции пазликов на области сборки и залоканы ли эти пазлики в своей правильной позиции. Это может быть отдельный компонент, который будет пробегаться по всем пазликам в области сборки и сохранять их позиции в отдельный файл.
         - При старте сборки нужно смотерть есть ли сохраненный прогресс для этого пазла. Если есть, то нужно сразу инстанцировать пазлики из сохраненных данных на поле с нужным состоянием.

3) Добавление пазлов в игру
    Пазлы надо добавить в игру и сделать обращение к ним из кода удобным.
    I. Добавить картинки ассетов в addressables систему. (2 чд)
        - Сразу разделить пазлы по 10 штук на группу(бандл), для того, чтобы не хранить один огромный бандл. Первый бандл должен содержать 10 пазлов, которые в экране выбора будут идти первыми, второй - те, что идут после. И так далее.
        - Часть бандлов(первые ~100 пазлов) имеет смысл вшить в билд, а остальные хранить на сервере.
    II. Добавить конфиг пазлов (2 чд)
        - Тут я сразу разделил бы путь к превью и к полноразмерной картинке. Хотя в прототипе эти ассеты могут совпадать, в дальнейшем будет иметь смысл отдельно сжимать основную картинку для превью.
        - Пример конфига:
            {
                "puzzles" : [
                    {
                    "id" : "1234",
                    "splitConfig" : "config_id",
                    "previewPath" : "path/to/file",
                    "fullImagePath" : "path/to/file"
                    },
                    {
                    "id" : "1234",
                    "splitConfig" : "config_id",
                    "previewPath" : "path/to/file",
                    "fullImagePath" : "path/to/file"
                    }
                ]
            }
    III. Добавить конфиг разбиений. (1-4 чд зависит от количества контента)
         - Пример конфига разбиений:
        {
            "splitConfigs" : [
                {
                    "id" : "split_id",
                    "w" : 20,
                    "h" : 20,
                    "piecesMask" : "path/to/mask"
                },
                {
                    "id" : "split_id",
                    "w" : 10,
                    "h" : 10,
                    "piecesMask" : "path/to/mask"
                }
            ]
        }
         - Так же нужно добавить маски на каждый конфиг разбиений. Маска должна представлять из себя атлас со всеми кусочками, которые используются в этом разбиении. Удобней всего будет, если каждый кусочек будет занимать фиксированное количество пикселей, тогда мы сможем определить, какая часть текстуры атласа к какому кусочку относится. Например если кусочек это 100x100 пикселей, тогда кусочек с координатами {3; 4} будет расположет в квадрате 100x100 верхний левый угол которого находится в пикселе {300; 400}. Если в прототипе количество разбиений будет небольшим и не будет содержать много кусочков, то это решение будет работать нормально. Если же уже в прототипе будет большое количество кусочков для одного конфига(например w=h=100), и при этом кусочки по форме будут повторяться, то тогда будет иметь смысл оптимизировать маску и добавлять туда только уникальные кусочки. При этом надо иметь возможность замапить координаты кусочка в атласе с координатами кусочка в пазле. Для этого скорее всего потребуется отдельный конфиг.
        
4) Инфраструктура игры. (*Эту часть из прототипа можно убрать или сильно упростить до банального компонентного подхода. Она занимает не мало времени и не является необходимой, тем не менее, если прототип получит дальнейшее развитие, то это нужно сделать в первую очередь. Так же часто у компаний есть свои архитектурные шаблоны и темплейтные репозитории которые уже содержат базовую инфраструктуру проекта. Если такой имеется, то стоит использовать его.)
    Нужно обеспечить базовый механизмы переключения между экранами и их инициализацию. Для этой цели можно использовать паттерн MVVM в связке c DI фреймворком Zenject.
    I. Создать базовые абстракции игры. (2 чд)
        - Создать базовые классы для основных абстракций. 
            * View - так как View связан с отображением он будет активно использовать UnityAPI. Логично будет унаследовать его от MonoBehaviour. Должен содержать базовую логику инициализации и реагирование на базовые изменения во ViewModel.
            * ViewModel - должен содержать базовый API для управления состоянием View. Пока это может быть только закрытие.
            * У слоя модели не будет никакой базовой логики, так что базовая абстракция тут не нужна.
        - View слой не должен иметь прямого доступа к слою моделей. 
        - Никакой слой абстракции не должен иметь доступ к слою View.
        - Каждая вьюха будет вешаться на отдельный префаб. Так же префаб может содержать вложенные друг в друга вьюхи. Это так же надо учесть при инициализации вьюх.
        - Для одной View должен создаваться один ViewModel. Подобное отношение 1:1 ближе к MVP паттерну, но по моему опыту так удобне управлять подобной системой.
    II. Создать API для управления вьюхами. (3 чд)
        - Отркытие определенного View. Метод может принимать путь к префабу вьюхи. Должен инстанцировать префаб с инжектингом всех зависимостей + создавать необходимые ViewModel'и и прокидывать их в нужные вьюхи.
        - Закрытие View. Предположительно можно получить доступ к ViewModel и вызвать у него метод Destroy() или Close(). View, в свою очередь отреагирует и тоже уничтожится.
        - Нужно добавить API для указания какой тип View с каким ViewModel связан.
    Те части приложения, которые активно работают на компонентной модели не требуют(по крайней мере пока) отдельной системы поверх той, что уже имеются в Unity3d. Подобные компонентные системы могут существовать в рамкак префаба конкретной вьюхи.